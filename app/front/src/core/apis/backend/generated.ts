//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from "axios";
import axios, { AxiosError } from "axios";

export class AuthenticationClient {
	protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
	private instance: AxiosInstance;
	private baseUrl: string;

	constructor(baseUrl?: string, instance?: AxiosInstance) {
		this.instance = instance ? instance : axios.create();

		this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4001";
	}

	/**
	 * @param hash user's password hashed with salt
	 */
	register(username: string, hash: string, cancelToken?: CancelToken | undefined): Promise<User> {
		let url_ = this.baseUrl + "/api/auth/{username}";
		if (username === undefined || username === null) throw new Error("The parameter 'username' must be defined.");
		url_ = url_.replace("{username}", encodeURIComponent("" + username));
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(hash);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "POST",
			url: url_,
			headers: {
				"Content-Type": "application/json",
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processRegister(_response);
			});
	}

	initRegister(username: string, cancelToken?: CancelToken | undefined): Promise<InitRegisterResponse> {
		let url_ = this.baseUrl + "/api/auth/{username}/init";
		if (username === undefined || username === null) throw new Error("The parameter 'username' must be defined.");
		url_ = url_.replace("{username}", encodeURIComponent("" + username));
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "POST",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processInitRegister(_response);
			});
	}

	verify(username: string, hash: string, cancelToken?: CancelToken | undefined): Promise<boolean> {
		let url_ = this.baseUrl + "/api/auth/{username}/login";
		if (username === undefined || username === null) throw new Error("The parameter 'username' must be defined.");
		url_ = url_.replace("{username}", encodeURIComponent("" + username));
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(hash);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "POST",
			url: url_,
			headers: {
				"Content-Type": "application/json",
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processVerify(_response);
			});
	}

	initVerify(username: string, cancelToken?: CancelToken | undefined): Promise<InitVerifyResponse> {
		let url_ = this.baseUrl + "/api/auth/{username}/login/init";
		if (username === undefined || username === null) throw new Error("The parameter 'username' must be defined.");
		url_ = url_.replace("{username}", encodeURIComponent("" + username));
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "POST",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processInitVerify(_response);
			});
	}

	protected processRegister(response: AxiosResponse): Promise<User> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 201) {
			const _responseText = response.data;
			let result201: any = null;
			let resultData201 = _responseText;
			result201 = JSON.parse(resultData201);
			return Promise.resolve<User>(result201);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<User>(null as any);
	}

	protected processInitRegister(response: AxiosResponse): Promise<InitRegisterResponse> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<InitRegisterResponse>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<InitRegisterResponse>(null as any);
	}

	protected processVerify(response: AxiosResponse): Promise<boolean> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<boolean>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<boolean>(null as any);
	}

	protected processInitVerify(response: AxiosResponse): Promise<InitVerifyResponse> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<InitVerifyResponse>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<InitVerifyResponse>(null as any);
	}
}

export class UsersClient {
	protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
	private instance: AxiosInstance;
	private baseUrl: string;

	constructor(baseUrl?: string, instance?: AxiosInstance) {
		this.instance = instance ? instance : axios.create();

		this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4001";
	}

	get(username: string, cancelToken?: CancelToken | undefined): Promise<User> {
		let url_ = this.baseUrl + "/api/auth/{username}";
		if (username === undefined || username === null) throw new Error("The parameter 'username' must be defined.");
		url_ = url_.replace("{username}", encodeURIComponent("" + username));
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "GET",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processGet(_response);
			});
	}

	protected processGet(response: AxiosResponse): Promise<User> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<User>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<User>(null as any);
	}
}

export interface UserBase {
	username: string;
	hash: string;
	salt: string;
	settings: Settings;
	credentials: Credentials;
	authorizations: Authorizations;
}

export interface User extends UserBase {
	id: string;
}

export interface Settings {
	theme: SettingsType;
}

export enum SettingsType {
	Dark = "Dark",
	Light = "Light",
	System = "System",
}

export interface Credentials {
	github?: Github | undefined;
	docker?: Docker | undefined;
}

export interface Github {
	token: string;
	user: string;
}

export interface Docker {
	username: string;
	password: string;
}

export interface Authorizations {
	authentication: Authentication;
}

export interface Authentication {
	roles: AuthenticationRoles[];
}

export enum AuthenticationRoles {
	User = "User",
	Admin = "Admin",
}

export interface InitRegisterResponse {
	salt: string;
}

export interface InitVerifyResponse {
	salt: string;
	challenge: string;
}

export class ApiException extends Error {
	override message: string;
	status: number;
	response: string;
	headers: { [key: string]: any };
	result: any;
	protected isApiException = true;

	constructor(message: string, status: number, response: string, headers: { [key: string]: any }, result: any) {
		super();

		this.message = message;
		this.status = status;
		this.response = response;
		this.headers = headers;
		this.result = result;
	}

	static isApiException(obj: any): obj is ApiException {
		return obj.isApiException === true;
	}
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any }, result?: any): any {
	if (result !== null && result !== undefined) throw result;
	else throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
	return obj && obj.isAxiosError === true;
}
